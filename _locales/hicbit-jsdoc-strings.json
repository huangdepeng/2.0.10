{
  "hicbit.Buzzer": "Buzzer",
  "hicbit.Clearscreen": "Display clear",
  "hicbit.getServosAngle": "Get servos angle",
  "hicbit.hicbit_Init": "hicbit initialization, please execute at boot time",
  "hicbit.hicbit_SoundSensor": "Set the Sound sensor status,1 detect the sound source,0 no detect the sound source 声音",
  "hicbit.hicbit_actionRunover": "Wait for Actiongroup Finishing",
  "hicbit.hicbit_avoidSensor": "Get the obstacle avoidance sensor status,1 detect obstacle,0 no detect obstacle 避障判断",
  "hicbit.hicbit_belt_clearLight": "Clear the color of the colored lights and turn off the lights.",
  "hicbit.hicbit_belt_initRGBLight": "Initialize RGB\n\nSet the brightness of the strip. This flag only applies to future operation.\n\n\nSet the color of the colored lights, after finished the setting please perform  the display of colored lights.\n\nSet RGB Color argument\n\nDisplay the colored lights, and set the color of the colored lights to match the use. After setting the color of the colored lights, the color of the lights must be displayed.\n\nClear the color of the colored lights and turn off the lights.\n\nInitialize Light belt",
  "hicbit.hicbit_belt_setPixelRGB": "Set the color of the colored lights, after finished the setting please perform  the display of colored lights.",
  "hicbit.hicbit_belt_showLight": "Display the colored lights, and set the color of the colored lights to match the use. After setting the color of the colored lights, the color of the lights must be displayed.",
  "hicbit.hicbit_checkCurrentColor": "Color sensor return the color.",
  "hicbit.hicbit_collisionsensor": "Get the collision sensor status,1 trigger,0 no trigger 碰撞",
  "hicbit.hicbit_getBatVoltage": "Set the speed of the fan, range of -100~100.\n//% \n//% \nexport function hicbit_setFanSpeed(port: hicbit_fanPort, speed1: number) {\nif (speed1 > 100 || speed1 < -100) {\nreturn;\n}\nlet pin1 = AnalogPin.P1;\nlet pin2 = AnalogPin.P2;\nif (port == hicbit_fanPort.port2) {\npin1 = AnalogPin.P13;\npin2 = AnalogPin.P14;\n}\nif (speed1 < 0) {\npins.analogWritePin(pin2, 0);\npins.analogWritePin(pin1, pins.map(-speed1, 0, 100, 0, 1023));\n}\nelse if (speed1 > 0) {\npins.analogWritePin(pin1, 0);\npins.analogWritePin(pin2, pins.map(speed1, 0, 100, 0, 1023));\n}\nelse {\npins.analogWritePin(pin2, 0);\npins.analogWritePin(pin1, 0);\n}\n}\nGet the volume level detected by the sound sensor, range 0 to 255\n//% \nexport function hicbit_getSoundVolume(): number {\nreturn volume;\n}\nGet hicbit current voltage,the unit is mV",
  "hicbit.hicbit_getKnobValue": "Get the ad value of the knob moudule 旋钮",
  "hicbit.hicbit_getSoundsensorValue": "Get the ad value of the Sound sensor moudule 声音AD",
  "hicbit.hicbit_getavoidSensorValue": "Get the ad value of the avoid Sensor moudule 避障AD",
  "hicbit.hicbit_getphotosensitiveValue": "Get the ad value of the photosensitive moudule 光敏",
  "hicbit.hicbit_init_colorSensor": "Initialize the color sensor,please execute at boot time",
  "hicbit.hicbit_lineSensorValue": "Get the obstacle avoidance sensor status,1 detect obstacle,0 no detect obstacle\n//% \nexport function hicbit_avoidSensor(port: hicbit_touchKeyPort): boolean {\nlet status = 0;\nlet flag: boolean = false;\nswitch (port) {\ncase hicbit_touchKeyPort.port1:\npins.setPull(DigitalPin.P1, PinPullMode.PullUp);\nstatus = pins.digitalReadPin(DigitalPin.P1);\nbreak;\ncase hicbit_touchKeyPort.port2:\npins.setPull(DigitalPin.P13, PinPullMode.PullUp);\nstatus = pins.digitalReadPin(DigitalPin.P13);\nbreak;\ncase hicbit_touchKeyPort.port3:\nif (P14_ad > 0xA)\nstatus = 1\nelse\nstatus = 0;\nbreak;\n}\nif (status == 1)\nflag = false;\nelse\nflag = true;\nreturn flag;\n}\nGet the line follower sensor port ad value 巡线",
  "hicbit.hicbit_photosensitiveSensor": "Get the Photosensitive sensor status,1 detect bright,0 no detect bright 光敏",
  "hicbit.hicbit_readAngle": "Send read hicbit servos angle command",
  "hicbit.hicbit_runActionGroup": "Set the servo controller to run a actiongroup",
  "hicbit.hicbit_runActionGroup|param|times": "Running times. eg: 1",
  "hicbit.hicbit_setMotorSpeed": "Send robot attitude to the servo controller\n\n\n\nSet the speed of the number 1 motor and number 2 motor, range of -100~100, that can control the tank to go advance or turn of.",
  "hicbit.hicbit_stopActionGroup": "Stop running actiongroup",
  "hicbit.hicbit_ultrasonic": "Get the distance of ultrasonic detection to the obstacle 超声波",
  "hicbit.onhicbit_getAngle": "Do someting when hicbit receive angle",
  "hicbit.onhicbit_getAngle|param|body": "code to run when event is raised",
  "hicbit.setDisplay": "Display ultrasonic distance",
  "hicbit.setServo": "Set the angle of servo 1 to 8, range of 0~270 degree",
  "hicbitRGBColors": "hicbitRGBLight package",
  "hicbitRGBLight": "QbitRGBLight Functions",
  "hicbitRGBLight.LHhicbitRGBLight": "A LHQbitRGBLight class",
  "hicbitRGBPixelMode": "Different modes for RGB or RGB+W RGBLight QbitRGBColors"
}